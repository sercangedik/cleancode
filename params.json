{"name":"Cleancode","tagline":"","body":"# Clean Code\r\n![alt tag](https://www.butterfly.com.au/images/easyblog_images/27/2e1ax_butterfly_entry_ARASH-clean-code.jpg)\r\n\r\n##Chapter 1 - Clean Code\r\n### The Boy Scout Rule\r\n* Leave the campground cleaner than you found it.\r\n\r\n### **What is the clean code for masters ?**\r\n\r\n* **Bjarne Stroustrup :** Elegant and efficient.\r\n* **Grady Booch :** Simple and direct.\r\n* **Michael Feathers :** It looks like it was written by someone who cares.\r\n* **Ron Jeffries :** Small, expressive, simple and no duplication.\r\n\r\n##Chapter 2 - Meaningful Names\r\n\r\n* Avoid disinformation\r\n* Use pronounceable names\r\n* Use searchable names\r\n```java\r\nfinal Popup popup = popupManager.get(stage, \"/popup/friendRemovePopup.xml\", true, false, 0);\r\n\r\nfloat ratio = (float)game.getHeight() / (float)graphics.getHeight() ;\r\n\r\n//rakibin chat mesaji\r\nchatBubble = (TextBalloon) findActor(\"chatBubbleTop\");\r\n```\r\n### Pick One Word per Concept\r\n* Controller\r\n* Manager\r\n* Driver\r\n\r\n![](http://s27.postimg.org/g4knt0sir/Screen_Shot_2016_01_29_at_10_37_18.png)\r\n![](http://s30.postimg.org/v8ue5sz1d/Screen_Shot_2016_01_29_at_10_37_24.png)\r\n\r\n### Don't pun (kelime oyunu)\r\n\r\n* Shorter names are generally better than longer ones, so long as they are clear. Add no\r\nmore context to a name than is necessary.\r\n\r\n\r\n##Chapter 3 - Functions\r\n\r\n### Small !\r\n\r\n* The first rule of functions is that they should be small. The second rule of functions is that\r\nthey should be smaller than that.\r\n\r\n### Do One Thing\r\n\r\n* Functions should do one thing. They should do it well. They sould do it only.\r\n\r\n![](http://s15.postimg.org/ijk8vwnuj/Screen_Shot_2016_01_29_at_10_57_23.png)\r\n\r\n### The Stepdown Rule\r\n```java\r\n seeAMovie = ()->\r\n     BuyTheTicket()\r\n     watch()\r\n\r\n BuyTheTicket = ()->\r\n     //some thing\r\n\r\n watch = () ->\r\n     //some thing\r\n```\r\n### Use Descriptive Names\r\n\r\n* Don’t be afraid to make a name long. A long descriptive name is better than a short enigmatic name.\r\n```java\r\n    public void logFirstTypeTwoGameTimerHandledParameter(String classDotMethod) {\r\n\t\tsessionLogger.append(classDotMethod + \" - firstTypeTwoGameTimerHandled : \" + gameModel.isFirstTypeTwoGameTimerHandled());\r\n\t}\r\n```\r\n### Don't Repeat Yourself !\r\n\r\n## Chapter 4 - Comments \r\n\r\n### Don’t comment bad code—rewrite it.\r\n\r\n* Formatting\r\n* Clarification\r\n* TODO\r\n* Journal\r\n* Position Markers (Okey-101 ////////////////////////)\r\n\r\n## Chapter 5 - Formatting\r\n\r\n* Vertical Formatting\r\n* Horizontal Formatting (80 character standard)\r\n\r\n![](http://s22.postimg.org/6bu8auysx/Screen_Shot_2016_01_29_at_11_03_26.png)\r\n\r\n### Team Rules\r\n* A team of developers should agree upon a single formatting style.\r\n\r\n## Chapter 6 - Objects and Data Structures\r\n\r\n### Law of Demeter \r\n_Talk to Friends Not to Strangers_\r\n\r\nFunction f which is inside class C can only call following functions\r\n* Other functions of class C\r\n* Functions of another object which is created inside f\r\n* Functions of object which is passed as parameter to f\r\n* Functions of another object which is an instance inside class C.\r\n\r\n### Data Transfer Objects\r\n* A class with public variables and no functions\r\n\r\n### Train Wrecks\r\n```java\r\nOptions opts = ctxt.getOptions();\r\nFile scratchDir = opts.getScratchDir();\r\nfinal String outputDir = scratchDir.getAbsolutePath();\r\n\r\n\r\nfinal String outputDir = ctxt.options.scratchDir.absolutePath;\r\n```\r\n## Chapter 7 - Error Handling\r\n\r\n### Use Exceptions Rather Than Return Codes\r\n* It is easy to forget\r\n* Provide context with exceptions\r\n\r\n### Avoid pass null && return null\r\n\r\n## Chapter 8 - Boundaries\r\n* Write test for the third-party code for understanding\r\n* Abstraction\r\n\r\n## Chapter 9 - Unit Tests\r\n\r\n### The Three Laws of TDD\r\n* You may not write production code until you have written a failing unit test.\r\n* You may not write more of a unit test than is sufficient to fail, and not compiling is failing.\r\n* You may not write more production code than is sufficient to pass the currently failing test.\r\n \r\n### Tests enable the -ilities\r\n* Flexible\r\n* Maintainable\r\n* Reusable\r\n\r\n### Why ?\r\n* If you have tests, you do not fear making changes to the code.\r\n\r\n### Keeping test clean\r\n* Readability\r\n* Readability\r\n* Readability\r\n\r\n### One Assert per Test\r\n* Single conclusion that is quick and easy to understand.\r\n```java\r\n    @Test\r\n    public void emptyFriendsModel() {\r\n        FriendsModel friendsModel = new FriendsModel();\r\n        Assert.assertEquals(friendsModel.toString(), \"FriendsModel [gameFriends -> 0], [installedFriends -> 0], [notInstalledFriends -> 0]\");\r\n    }\r\n```\r\n### Single Concept per Test\r\n* Test a single concept in each test function.\r\n```java\r\n    @Test\r\n    public void test_MatchType() {\r\n        TournamentTableModel.MatchType matchType = TournamentTableModel.MatchType.matchTypeByRound(0);\r\n        assertEquals(matchType, TournamentTableModel.MatchType.QUARTER_FINAL);\r\n        assertEquals(matchType.getStage(), 1);\r\n        matchType = TournamentTableModel.MatchType.matchTypeByRound(1);\r\n        assertEquals(matchType, TournamentTableModel.MatchType.SEMI_FINAL);\r\n        assertEquals(matchType.getStage(), 2);\r\n        matchType = TournamentTableModel.MatchType.matchTypeByRound(2);\r\n        assertEquals(matchType, TournamentTableModel.MatchType.FINAL);\r\n        assertEquals(matchType.getStage(), 3);\r\n        matchType = TournamentTableModel.MatchType.matchTypeByRound(1124);\r\n        assertEquals(matchType, TournamentTableModel.MatchType.EMPTY);\r\n\r\n        assertTrue(TournamentTableModel.MatchType.SEMI_FINAL.isBiggerThanOrEqualTo(TournamentTableModel.MatchType.QUARTER_FINAL));\r\n        assertTrue(TournamentTableModel.MatchType.FINAL.isBiggerThanOrEqualTo(TournamentTableModel.MatchType.SEMI_FINAL));\r\n        assertTrue(TournamentTableModel.MatchType.FINAL.isBiggerThanOrEqualTo(TournamentTableModel.MatchType.QUARTER_FINAL));\r\n    }\r\n```\r\n### F.I.R.S.T.\r\n* Fast (Tests should be fast)\r\n* Independent (Tests should not depend on each other)\r\n* Repeatable (Tests should be repeatable in any environment)\r\n* Self Validating (The tests should have a boolean output)\r\n* Timely (The tests need to be written in a timely fashion)\r\n\r\n## Chapter 10 - Classes\r\n\r\n* Again stepdown rule\r\n* Classes should be small \r\n* The single responsibility principle (One responsibility—one reason to change)\r\n\r\n## Chapter 11 - Systems\r\n\r\n* Dependency Injection\r\n* Scaling Up\r\n\r\n## Chapter 12 - Emergence \r\n* Runs all the tests\r\n* Contains no duplication\r\n* Expresses the intent of the programmer\r\n* Minimizes the number of classes and methods\r\n\r\n## Chapter 13 - Smells and Heuristics\r\n* Obsolete (Modası Geçmiş) Comment\r\n* Poorly Written Comment\r\n* Commented-Out Code\r\n* No Argument is Best in Functions\r\n* Multiple Languages in One Source File\r\n* Code at Wrong Level of Abstraction\r\n* Replace Magic Numbers with Named Constants\r\n* Avoid Negative Conditionals\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}